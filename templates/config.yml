# If set to db, then use DB table to store gateways,
# useful when your run many gateways on the same server.
gateways_source: config

# Used for:
# - scoping Redis keys
environment: production

# When you display a payment window to a user, he has some time to pay. But what if a
# transaction has been made in the last seconds and Straight didn't have time to detect it?
# This just adds a little bit more time to each expiration period.
# So technically, you can tell your customer he's got 900 seconds to pay, yet wait additional
# 30 seconds (default value) to be able to detect a late transaction
expiration_overtime: 30

# If you have this number of expired addresses in a row,
# the latest one of those will be reused to create a new order.
# This is because wallets that support BIP32 do a limited lookup: they
# only normally check the next 20 next addresses. Thus, the default value.
# Without address reuse, merchants may fall into a situation where they
# technically receive the money, but it's never detected by the wallet.
reuse_address_orders_threshold: 20

# Comment out to disable orders counting.
count_orders: true

# Uncomment this if you want to limit orders creation rate.
# For example, if user's cat makes more than 21 new orders during 60 seconds (from the same IP and Widget),
# any user with this IP will be unable to create more orders via this Widget during those 60 seconds
# Additionally, you can block new orders creation via any Widget from throttled IP for 300 seconds
throttle:
  requests_limit: 21
  period: 60           # in seconds
  ip_ban_duration: 300 # in seconds

# Path to certificates and private key for BIP70 protocol. Uncomment this and provide
# it to send payment requests to wallets.
# ssl_certificate_path: '/etc/letsencrypt/live/api.execfast.nl/cert.pem'
# private_key_path: '/etc/letsencrypt/live/api.execfast.nl'

redis:
  host: localhost
  port: 6379
  #db:       null # change to 1, 2, 3 etc. or leave as is
  #password: null # if no password is needed, leave as is

gateways:
  default:
    pubkey: xpub....
    confirmations_required: 0
    order_class: "StraightServer::Order"
    secret: 'secret'
    check_signature: true
    #merchant_url: 'http://localhost:3000/my_shop'
    callback_url: 'http://localhost:3000/my_callback_url'
    default_currency: 'EUR'
    orders_expiration_period: 600 # seconds
    #after_payment_redirect_to: 'http://localhost:3000/my_app/my_own_page'
    auto_redirect: false

    # address_provider: 'Bip32'
    # address_derivation_scheme: 'm/0/n'

    # This options decides whether we should also check the DB for status updates first
    # when we check order status. That is, if we're tracking an order and this option
    # is set to true, it first fetches the fields from the local DB, sees if the status has changed there,
    # and if it did - we no longer need to query the blockchain.
    #
    # Usecase? Currently mostly debugging (so set it to false for production). For example,
    # when testing payments, you don't actually want to pay, you can just run the server console,
    # change order status in the DB and see how your client picks it up, showing you that your
    # order has been paid for.
    check_order_status_in_db_first: true # Consider changing to `false` in production.

    # The order matters here, we check for prices with the first adapter,
    # if it fails, move on to the next
    exchange_rate_adapters:
      - Bitpay
      - Coinbase
      - Bitstamp

    # This affects whether it is possible to create a new order with the gateway.
    # If it's set to false, then it won't be possible to create a new order, but
    # it will keep checking on the existing ones.
    active: true
    # If this option set to true, gateway using TESTNET
    test_mode: false

# These adapters are used to query the blockchain. If the first one fails, the second one is tried and
# so on. The adapters are generally looked up as subclasses of Straight::Blockchain::Adapter
# but you are free to create your own and put a fully qualified class name below. The order is,
# of course, important.
blockchain_adapters:
  - BlockchainInfo # uses Straight::Blockchain::BlockchainInfoAdapter
  - Mycelium # uses Straight::Blockchain::MyceliumAdapter
  # - InsightAdapter # uses Straight::Blockchain::InsightAdapter 
  # - ChainCom #  Uses Straight::Blockchain::ChainComAdapter
  #  api_key_id: my_chain_com_api_key_id
  # Uses your custom adapter
  # MyCustomClass::MyCustomBlockchainAdapter:

logmaster:
  log_level: DEBUG # Wise to change to WARN for production
  file: straight.log
  raise_exception: false
  name: Straight server logger

  # These options bellow send you email whenever a FATAL error occurs.
  # You probably want to uncomment them for production. See https://github.com/snitko/logmaste
  # for various email options.
  #
  #email_config:
    #to: 'me@email.foo'
    #from: "logmaster@yourapp.com"

db:
  adapter: sqlite
  name: straight.db # file is always located in ~/.straight

  # No need to set these options for sqlite,
  # but other DBs may require them.
  #
  #user: username
  #password: password
  #host: hostname
  #port: 1234
